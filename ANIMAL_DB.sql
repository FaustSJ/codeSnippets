--
--
--
--DO NOT RUN ALL THIS CODE
--
--PICK AND CHOOSE LINES TO RUN
--
--


--DCL (this is in another connection.
CREATE USER ANIMAL_DB IDENTIFIED BY p4ssw0rd;
GRANT DBA TO ANIMAL_DB WITH ADMIN OPTION;

--DROP A WHOLE USER AND DATA
DROP USER ANIMAL_DB CASCADE;

--CAN ONLY CONNECT AND CANNOT SEE OTHER USERS OBJECTS
CREATE USER DUMMY IDENTIFIED BY 1234;
GRANT CONNECT TO DUMMY;

--DDL
CREATE TABLE ANIMAL
(
--A_ID for animal ID. 'A' is added because joint tables will
--    have an 'ID' column too, this is to reduce confusion.
    A_ID NUMBER, --default size of NUMBER(10,0)
    --don't do A_ID NUMBER PRIMARY KEY because you wont be able to add onto it
    A_KNOWN_NAME VARCHAR2(100) NOT NULL, --4000 is the max, 4000 per row. Any bigger and you need a BLOB.
    A_SCIENCE_NAME VARCHAR2(100) NOT NULL, --Try to keep it precise-ish tho. So 100 chars.
    A_DISCOVERY_DATE DATE, --not adding NOT NULL b/c some discovery dates may be unknown.
    A_GENDER VARCHAR(10) NOT NULL, --in case they want to lengthen it to full 'female' and 'male' instead of 'f','m'
    --you can modify fields later if you make a mistake. Use ALTER.
    CONSTRAINT PK_ANIMAL PRIMARY KEY (A_ID), --you can do (A_ID, A_GENDER), but it's not recommended. complicates things.
    CONSTRAINT CHK_GENDER CHECK (A_GENDER IN ('MALE','FEMALE','UNKNOWN'))--values in '' are case-sensitive! '' for strings ""for obj.
    
);

DESCRIBE ANIMAL;
--DROP TABLE ANIMAL;

CREATE TABLE SPECIES
(
    S_ID NUMBER,
    S_NAME VARCHAR2(100) NOT NULL,
    S_POPULATION_MILLION NUMBER(10,0), --anything above 10 chances inaccuracy
    CONSTRAINT PK_SPECIES PRIMARY KEY (S_ID),
    CONSTRAINT UNQ_SPECIES_NAME UNIQUE (S_NAME)
);

DESCRIBE SPECIES;

-- crowsfeet [Species]--E[Animal]

--so ANIMAL needs the FOREIGN KEY column
ALTER TABLE ANIMAL
ADD (S_ID NUMBER);

--the s_id column in animal references the s_id column in species
ALTER TABLE ANIMAL
ADD CONSTRAINT FK_ANIMAL_SPECIES
FOREIGN KEY (S_ID) REFERENCES SPECIES (S_ID);

--we will use this for hashing purposes
ALTER TABLE ANIMAL
ADD (A_HASH VARCHAR2(50));


--DML (SIMPLE)
--you can do INSERT INTO SPECIES(columnNames)...
INSERT INTO SPECIES(S_ID, S_NAME) VALUES (1, 'MAMMAL');
INSERT INTO SPECIES(S_ID, S_NAME) VALUES (2, 'REPTILES');
INSERT INTO SPECIES(S_ID, S_NAME) VALUES (3, 'ARACHNID');
INSERT INTO SPECIES(S_ID, S_NAME) VALUES (4, 'RUMINANT');
INSERT INTO SPECIES(S_ID, S_NAME) VALUES (5, 'AMPHIBIOUS');
INSERT INTO ANIMAL VALUES(1, 'WOLF', 'CANIS LUPUS', NULL, 'MALE', 1, NULL);--Last two are FK and hash

SELECT * FROM SPECIES ORDER BY S_ID;

--SELECT S_NAME FROM SPECIES WHERE S_ID = 2;
SELECT A_KNOWN_NAME, A_SCIENCE_NAME, S_ID, (SELECT S_NAME FROM SPECIES WHERE S_ID = A.S_ID) AS SPECIES FROM ANIMAL A;

--TRY
SELECT A.A_KNOWN_NAME, A.A_SCIENCE_NAME, S.S_NAME FROM ANIMAL A, SPECIES S;
--VERSUS
SELECT A.A_KNOWN_NAME, A.A_SCIENCE_NAME, S.S_NAME FROM ANIMAL A, SPECIES S WHERE A.S_ID = S.S_ID;
SELECT A.A_KNOWN_NAME, A.A_SCIENCE_NAME, S.S_NAME 
FROM ANIMAL A, SPECIES S 
WHERE A.S_ID = S.S_ID AND ROWNUM <= 3; --this is how you limit results!! try only 100 at a time.

SELECT A_KNOWN_NAME AS NAME FROM ANIMAL; --applies an alias to the column's name
--select returns a "result set" (when it's a virtual table)
--in JDBC we'll have to iterate through the results we get back from SELECT
SELECT ANIMAL_NAME FROM (SELECT A_KNOWN_NAME AS ANIMAL_NAME FROM ANIMAL); --ANIMAL_NAME is an alias

INSERT INTO ANIMAL VALUES(1, 'WOLF', 'CANIS LUPUS', NULL, 'MALE', 1, NULL); --UNIQUE CONSTRAINT
INSERT INTO ANIMAL VALUES(2, 'BLACK WIDOW', 'LATRODECTUS', NULL, 'FEMALE', 1, NULL);
--if you put null instead of a num for the PK (first value), you'll get a primary key constraint
INSERT INTO ANIMAL VALUES(3, 'KOMODO DRAGON', 'VARANUS K.', NULL, 'UNKNOWN', 1, NULL);

--UPDATE 
UPDATE ANIMAL SET S_ID = 3; --sets all animals to reptiles
UPDATE ANIMAL SET S_ID = 3 WHERE A_ID = 2; --add a WHERE clause instead
UPDATE ANIMAL SET S_ID = 3 WHERE A_ID IN (SELECT A_ID FROM ANIMAL WHERE A_KNOWN_NAME LIKE 'BLACK%');
--use IN because there may be multiple that match BLACK. = is for a single result.

UPDATE SPECIES SET S_POPULATION_MILLION = 25000
WHERE S_ID = 3;

COMMIT;

--
--
--
--SEQUENCE USED TO AUTO INCREMENT
CREATE SEQUENCE ANIMAL_SEQ
  START WITH 1
  INCREMENT BY 1;
--TRIGGER THAT WILL INCREMENT THE SEQUENCE
--AND ALTER THE PRIMARY KEY VALUE OF AN INSERT
CREATE OR REPLACE TRIGGER ANIMAL_B_INSERT
BEFORE INSERT
ON ANIMAL
FOR EACH ROW
BEGIN
  /* INCREASE THE SEQUENCE */
  --IF YOU DON'T WANT USERS TO INSERT ANY VALUE TO THE PK
  --COLUMN, REMOVE THE IF STATEMENT.
  IF :NEW.A_ID IS NULL THEN
    SELECT ANIMAL_SEQ.NEXTVAL INTO :NEW.A_ID FROM DUAL;
  END IF;
  SELECT GET_ANIMAL_HASH(:NEW.A_KNOWN_NAME, :NEW.A_SCIENCE_NAME) INTO :NEW.A_HASH FROM DUAL;
END;
/
--HASHING FUNCTION (Uses MD5)
-- the / refers to PLSQL
CREATE OR REPLACE FUNCTION GET_ANIMAL_HASH (ANIMAL_KNOWN_NAME VARCHAR2, ANIMAL_SCIENCE_NAME VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT'; --"salting" the hash
BEGIN
--using an obfuscation (gibberish) tool inside of Oracle
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => ANIMAL_KNOWN_NAME || ANIMAL_SCIENCE_NAME || EXTRA)));
END;
/
DESCRIBE ANIMAL;
--USED FOR CALLABLE STATEMENT IN JDBC
CREATE OR REPLACE PROCEDURE INSERT_ANIMAL (A_KNOWN_NAME VARCHAR2, A_SCIENCE_NAME VARCHAR2, A_DISCOVERY_DATE VARCHAR2, A_GENDER VARCHAR2, SPECIES_ID NUMBER)
AS
BEGIN
  INSERT INTO ANIMAL VALUES(NULL, A_KNOWN_NAME, A_SCIENCE_NAME, TO_DATE(A_DISCOVERY_DATE,'MM-DD-YYYY'), A_GENDER, SPECIES_ID, NULL);
  COMMIT;
END;
/

--generating a hash
SELECT GET_ANIMAL_HASH('DOG','CANIS LUPUS FAMILIARIS') FROM DUAL;

CREATE SEQUENCE ANIMAL_SEQ
    START WITH 1
    INCREMENT BY 1;
    
--DUAL returns anything thrown at it.
SELECT ANIMAL_SEQ.NEXTVAL FROM DUAL;
SELECT 5+7 FROM DUAL;
SELECT SYSDATE FROM DUAL;
SELECT CURRENT_TIMESTAMP FROM DUAL;
SELECT TO_CHAT(SYSDATE, 'YYY/MM/DD HH:SS') FROM DUAL; --dates->format->oracle for date fromats

SELECT * FROM ANIMAL;

----EXEC is short for EXECUTE, they are the same
--EXEC INSERT_ANIMAL('BIRD','BIRDUS', '12-20-2013','FEMALE',1);
--has an issue with the Trigger, causes a unique constraint when generating the primary key

